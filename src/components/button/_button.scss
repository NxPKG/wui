// This file has lots of modifiers and is somewhat nesty by nature
//sass-lint:disable nesting-depth

// Our base button
.wuiButton {
  @include wuiButton;
  @include wuiSlightShadow;

  border-radius: $wuiBorderRadius;
  min-width: $wuiButtonMinWidth;

  .wuiButton__content {
    padding: 0 ($wuiSize - $wuiSizeXS);
  }

  .wuiButton__text {
    text-overflow: ellipsis;
    overflow: hidden;
  }

  &.wuiButton--small {
    height: $wuiButtonHeightSmall;
    line-height: $wuiButtonHeightSmall; // prevents descenders from getting cut off
  }

  &:hover,
  &:active {
    @include wuiSlightShadowHover;
  }

  &:enabled {
    &:hover,
    &:focus {
      background-color: transparentize($wuiColorPrimary, .9);
    }
  }

  &:disabled {
    @include wuiButtonContentDisabled;

    color: $wuiButtonColorDisabledText;
    border-color: $wuiButtonColorDisabled;

    &.wuiButton--fill {
      // Only increase the contrast of background color to text to 2.0 for disabled
      color: makeHighContrastColor($wuiButtonColorDisabled, $wuiButtonColorDisabled, 2);
      background-color: $wuiButtonColorDisabled;
      border-color: $wuiButtonColorDisabled;

      &:hover,
      &:focus {
        background-color: $wuiButtonColorDisabled;
        border-color: $wuiButtonColorDisabled;
      }
    }

    &:hover,
    &:focus {
      @include wuiSlightShadow;

      text-decoration: none;
    }
  }
}

// Create button modifiers based upon the map.
@each $name, $color in $wuiButtonTypes {
  .wuiButton--#{$name} {
    @if ($name == 'ghost') {
      // Ghost is unique and ALWAYS sits against a dark background.
      color: $color;
    } @else if ($name == 'text') {
      // The default color is lighter than the normal text color, make the it the text color
      color: $wuiTextColor;
    } @else {
      // Other colors need to check their contrast against the page background color.
      color: makeHighContrastColor($color, $wuiPageBackgroundColor);
    }

    border-color: $color;

    &.wuiButton--fill {
      background-color: $color;
      border-color: $color;

      // The function makes that hexes safe for theming
      $fillTextColor: chooseLightOrDarkText($color, $wuiColorGhost, $wuiColorInk);

      color: $fillTextColor;

      &:enabled {
        &:hover,
        &:focus {
          background-color: darken($color, 5%);
          border-color: darken($color, 5%);
        }
      }
    }

    &:enabled {
      $shadowColor: $wuiShadowColor;
      @if ($name == 'ghost') {
        $shadowColor: $wuiColorInk;
      } @else if (lightness($wuiTextColor) < 50) {
        // Only if this is the light theme do we use the button variant color to colorize the shadow
        $shadowColor: desaturate($color, 60%);
      }

      @include wuiSlightShadow($shadowColor);

      &:hover,
      &:focus {
        @include wuiSlightShadowHover($shadowColor);
        background-color: transparentize($color, .9);

        @if ($name == 'disabled') {
          cursor: not-allowed;
        }
      }
    }
  }
}

// Fix ghost/disabled look specifically
.wuiButton:disabled.wuiButton--ghost {
  &,
  &:hover,
  &:focus {
    @include wuiSlightShadow($wuiColorInk);
    color: $wuiButtonColorGhostDisabled;
    border-color: $wuiButtonColorGhostDisabled;
  }

  &.wuiButton--fill {
    background-color: $wuiButtonColorGhostDisabled;
    color: makeHighContrastColor($wuiButtonColorGhostDisabled, $wuiButtonColorGhostDisabled, 2);
  }
}

.wuiButton--fullWidth {
  display: block;
  width: 100%;
}
