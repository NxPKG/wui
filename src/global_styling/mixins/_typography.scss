// sass-lint:disable no-vendor-prefixes
// sass-lint:disable no-important

// Our base fonts

@mixin wuiFont {
  font-family: $wuiFontFamily;
  font-weight: $wuiFontWeightRegular;
  letter-spacing: -.005em;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  font-kerning: normal;
}

@mixin wuiCodeFont {
  font-family: $wuiCodeFontFamily;
  letter-spacing: normal;
}

@mixin wuiText {
  color: $wuiTextColor;
  font-weight: $wuiFontWeightRegular;
}

@mixin wuiTitle($size: 'm') {
  color: $wuiTitleColor;

  @if (map-has-key($wuiTitles, $size)) {
    @each $property, $value in map-get($wuiTitles, $size) {
      @if ($property == 'font-size') {
        @include fontSize($value);
      } @else {
        #{$property}: $value;
      }
    }
  } @else {
    @include fontSize($size);
    @include lineHeightFromBaseline(3);
  }
}

// Font sizing extends, using rem mixin

@mixin wuiFontSizeXS {
  @include fontSize($wuiFontSizeXS);
  line-height: $wuiLineHeight;
}

@mixin wuiFontSizeS {
  @include fontSize($wuiFontSizeS);
  line-height: $wuiLineHeight;
}

@mixin wuiFontSize {
  @include fontSize($wuiFontSize);
  line-height: $wuiLineHeight;
}

@mixin wuiFontSizeM {
  @include fontSize($wuiFontSizeM);
  line-height: $wuiLineHeight;
}

@mixin wuiFontSizeL {
  @include fontSize($wuiFontSizeL);
  line-height: $wuiLineHeight;
}

@mixin wuiFontSizeXL {
  @each $property, $value in map-get($wuiTitles, 'm') {
    @if ($property == 'font-size') {
      @include fontSize($value);
    } @else {
      #{$property}: $value;
    }
  }
  line-height: 1.25;
}

@mixin wuiFontSizeXXL {
  @each $property, $value in map-get($wuiTitles, 'l') {
    @if ($property == 'font-size') {
      @include fontSize($value);
    } @else {
      #{$property}: $value;
    }
  }
  line-height: 1.25;
}

@mixin wuiTextBreakWord {
  // https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
  overflow-wrap: break-word !important; // makes sure the long string will wrap and not bust out of the container
  word-wrap: break-word !important; // spec says, they are literally just alternate names for each other but some browsers support one and not the other
  word-break: break-word; // IE doesn't understand but that's ok
}

// Text truncation
//
// Prevent text from wrapping onto multiple lines, and truncate with an
// ellipsis.
//
// 1. Ensure that the node has a maximum width after which truncation can
//    occur.
// 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor
//    nodes.

@mixin wuiTextTruncate {
  // sass-lint:disable-block no-important
  max-width: 100%; // 1
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
  word-wrap: normal !important; // 2
}

@mixin wuiNumberFormat {
  font-feature-settings: $wuiFontFeatureSettings, 'tnum' 1; // Fixed-width numbers for tabular data
}


// Text weight shifting
//
// When changing the font-weight based the state of the component
// this mixin will ensure that the sizing is dependent on the boldest
// weight so it doesn't shifter sibling content.

@mixin wuiTextShift($fontWeight: $wuiFontWeightBold, $attr: 'data-text') {
  &::after {
    display: block;
    content: attr(#{$attr});
    font-weight: $fontWeight;
    height: 0;
    overflow: hidden;
    visibility: hidden;
  }
}

